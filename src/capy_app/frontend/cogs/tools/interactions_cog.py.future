import discord
import logging
from discord.ext import commands
from discord import app_commands
from discord.errors import DiscordException
from frontend.utils import colors
from config import settings


class InteractionsCog(commands.Cog):  # Renamed from ClearCommandsCog
    bot: commands.Bot
    logger: logging.Logger

    def __init__(self, bot: commands.Bot) -> None:
        self.bot = bot
        self.logger = logging.getLogger(
            f"discord.cog.{self.__class__.__name__.lower()}"
        )

    async def _clear_commands(
        self,
        ctx_or_interaction: commands.Context | discord.Interaction,
        is_global: bool = False,
    ) -> discord.Embed:
        """Clear commands and generate appropriate response embed.

        Args:
            ctx_or_interaction: The context or interaction that triggered the command
            is_global: Whether to clear global or guild commands

        Returns:
            discord.Embed: The response embed with success or error message
        """
        try:
            if is_global:
                self.bot.tree.clear_commands(guild=None)
                await self.bot.tree.sync()
                message = "Successfully cleared all global commands!"
                self.logger.info(
                    f"Global commands cleared ({'prefix' if isinstance(ctx_or_interaction, commands.Context) else 'slash'})"
                )
            else:
                guild = ctx_or_interaction.guild
                if not guild:
                    raise ValueError("Guild not found")
                await self.bot.tree.sync(guild=guild)
                await guild.rollout_application_commands(commands=[])
                message = "Successfully cleared all guild commands!"
                self.logger.info(
                    f"Guild commands cleared in {guild.name} ({'prefix' if isinstance(ctx_or_interaction, commands.Context) else 'slash'})"
                )

            return discord.Embed(
                title="Clear Commands",
                description=message,
                color=colors.SUCCESS,
            )

        except (DiscordException, ValueError) as e:
            message = f"Failed to clear {'global' if is_global else 'guild'} commands: {str(e)}"
            self.logger.error(message, exc_info=True)
            return discord.Embed(
                title="Error",
                description=message,
                color=colors.ERROR,
            )

    async def _readd_commands(
        self,
        ctx_or_interaction: commands.Context | discord.Interaction,
        target: str,
    ) -> discord.Embed:
        """Readd commands to specified target.

        Args:
            ctx_or_interaction: The context or interaction that triggered the command
            target: Where to readd commands ('current', 'dev', or 'global')
        """
        try:
            match target:
                case "current":
                    guild = ctx_or_interaction.guild
                    if not guild:
                        raise ValueError("Guild not found")
                    await self.bot.tree.sync(guild=guild)
                    message = f"Successfully readded commands to {guild.name}!"
                case "dev":
                    dev_guild = self.bot.get_guild(settings.DEBUG_GUILD_ID)
                    if not dev_guild:
                        raise ValueError("Dev guild not found")
                    await self.bot.tree.sync(guild=dev_guild)
                    message = f"Successfully readded commands to dev guild!"
                case "global":
                    await self.bot.tree.sync()
                    message = "Successfully readded global commands!"
                case _:
                    raise ValueError(f"Invalid target: {target}")

            self.logger.info(
                f"Commands readded to {target} ({'prefix' if isinstance(ctx_or_interaction, commands.Context) else 'slash'})"
            )
            return discord.Embed(
                title="Readd Commands",
                description=message,
                color=colors.SUCCESS,
            )

        except (DiscordException, ValueError) as e:
            message = f"Failed to readd commands to {target}: {str(e)}"
            self.logger.error(message, exc_info=True)
            return discord.Embed(
                title="Error",
                description=message,
                color=colors.ERROR,
            )

    @app_commands.command(
        name="clear_guild_commands",
        description="Clears all guild commands (Admin only)",
    )
    @app_commands.guilds(settings.DEBUG_GUILD_ID)
    @app_commands.default_permissions(administrator=True)
    async def clear_guild_commands(self, interaction: discord.Interaction) -> None:
        embed = await self._clear_commands(interaction, is_global=False)
        await interaction.response.send_message(embed=embed)

    @app_commands.command(
        name="clear_global_commands",
        description="Clears all global commands (Admin only)",
    )
    @app_commands.guilds(settings.DEBUG_GUILD_ID)
    @app_commands.default_permissions(administrator=True)
    async def clear_global_commands(self, interaction: discord.Interaction) -> None:
        embed = await self._clear_commands(interaction, is_global=True)
        await interaction.response.send_message(embed=embed)

    @app_commands.command(
        name="readd_commands",
        description="Readd commands to specified target (Admin only)",
    )
    @app_commands.guilds(settings.DEBUG_GUILD_ID)
    @app_commands.default_permissions(administrator=True)
    @app_commands.choices(
        target=[
            app_commands.Choice(name="Current Server", value="current"),
            app_commands.Choice(name="Dev Server", value="dev"),
            app_commands.Choice(name="Global", value="global"),
        ]
    )
    async def readd_commands(
        self,
        interaction: discord.Interaction,
        target: str = "current",
    ) -> None:
        embed = await self._readd_commands(interaction, target)
        await interaction.response.send_message(embed=embed)

    @commands.command(name="clearguild", hidden=True)
    @commands.has_permissions(administrator=True)
    @commands.guild_only()
    async def prefix_clear_guild(self, ctx: commands.Context) -> None:
        if ctx.guild and ctx.guild.id != settings.DEBUG_GUILD_ID:
            return
        embed = await self._clear_commands(ctx, is_global=False)
        await ctx.send(embed=embed)

    @commands.command(name="clearglobal", hidden=True)
    @commands.has_permissions(administrator=True)
    async def prefix_clear_global(self, ctx: commands.Context) -> None:
        if ctx.guild.id != settings.DEBUG_GUILD_ID:
            return
        embed = await self._clear_commands(ctx, is_global=True)
        await ctx.send(embed=embed)

    @commands.command(name="readd", hidden=True)
    @commands.has_permissions(administrator=True)
    async def prefix_readd(
        self, ctx: commands.Context, target: str = "current"
    ) -> None:
        if ctx.guild and ctx.guild.id != settings.DEBUG_GUILD_ID:
            return
        if target not in ["current", "dev", "global"]:
            await ctx.send("Invalid target. Use: current, dev, or global")
            return
        embed = await self._readd_commands(ctx, target)
        await ctx.send(embed=embed)


async def setup(bot: commands.Bot) -> None:
    await bot.add_cog(InteractionsCog(bot))
